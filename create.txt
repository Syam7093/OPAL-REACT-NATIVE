// module imports
import React, { useEffect, useState, useRef } from 'react';
import {
    StyleSheet,
    Text,
    TextInput,
    View,
    TouchableOpacity,
    Dimensions,
} from 'react-native';

import {
    widthPercentageToDP as wp,
    heightPercentageToDP as hp
} from 'react-native-responsive-screen';
import { scale, moderateScale, moderateVerticalScale } from 'react-native-size-matters';

import Toast from 'react-native-toast-message';
import { useNavigation } from '@react-navigation/native';

// icon imports
import Feather from 'react-native-vector-icons/Feather';
import AntDesign from 'react-native-vector-icons/AntDesign';
import LinearGradient from 'react-native-linear-gradient';

// util imports
import { RootColors, TextColors } from './../../utils/Colors';
import { FontFamily } from '../../utils/FontFamily';

// RTK imports
import {
    useAddNoteMutation
} from '../../store/services/notepad/notepadService';

// component imports
import ArrowLeft from '../../../assets/SVG/ArrowLeft';
import ToastMessage from '../../Toast/ToastMessage';



const { width, height } = Dimensions.get('window');

const CreateNotepad = ({ route }) => {

    const navigation = useNavigation();

    const [titleTeXT, setTitleText] = useState('');
    const [descriptionText, setDescriptionText] = useState('');
    const [inputHeight, setInputHeight] = useState(40);

    const toastRef = useRef(null);
    const draftRef = useRef(null);

    const [createNotes] = useAddNoteMutation();

    useEffect(() => {
        navigation.setOptions({
            headerLeft: () => (
                <Text onPress={() => { handleBackPress(), draftShowToast() }} style={{ marginLeft: 5, marginRight: 10 }}>
                    {/* <ArrowLeft></ArrowLeft> */}
                    <AntDesign name='arrowleft' size={25} color='#fff' />

                </Text>
            ),
        });
    }, [navigation, titleTeXT, descriptionText]);

    const handleShowToast = () => {
        if (toastRef.current) {
            toastRef.current.show();
        }
    }
    const draftShowToast = () => {
        if (draftRef.current) {
            draftRef.current.show();
        }
    }

    const handleBackPress = () => {
        if (titleTeXT && descriptionText) {
            draftNotedPad('drafted')
            setTimeout(() => {
                navigation.navigate('alllist', { activeTab: 'DRAFT' });
            }, 900)
            // navigation.navigate('alllist', { activeTab: 'DRAFT' });
        } else {
            navigation.navigate('Notepad');
        }
    };

    const createNotepads = async (status) => {
        let dataTosend = {
            title: titleTeXT,
            description: descriptionText,
            status: status
        };

        try {
            let savedData = await createNotes(dataTosend).unwrap();
            if (savedData.data.status === 'saved') {
                handleShowToast()
                setTimeout(() => {
                    navigation.navigate('alllist', { activeTab: "SAVED" })
                    console.log("saveddtaa",savedData,navigation.navigate)
                }, 500)
            }
            setTitleText("")
            setDescriptionText('')
        } catch (error) {
            console.log(error);
        }

    };

    const draftNotedPad = async (status) => {
        let dataTosend = {
            title: titleTeXT,
            description: descriptionText,
            status: status
        };

        try {
            let jsondata = await createNotes(dataTosend).unwrap();
            setTitleText("");
            setDescriptionText('');
        } catch (error) {
            console.log(error);
        }
    };

    const handleChangeText = (newText) => {
        setDescriptionText(newText);
    };


    return (
        <View style={styles.container}>

            <View style={styles.mainCreate}>
                <View style={styles.textAndInputContainer}>
                    <Text style={styles.textHeading}>
                        Title
                    </Text>
                    <View style={styles.textContainer}>
                        <View style={styles.micText}>
                            <TextInput
                                multiline
                                maxLength={50}
                                placeholder='Enter Title'
                                placeholderTextColor="#A7AFC8"
                                placeholderStyle={styles.placeholderMain}
                                value={titleTeXT}
                                keyboardType="default"
                                style={styles.inputs}
                                onChangeText={(value) => { setTitleText(value) }}
                            />

                        </View>
                        <Feather name='mic' size={20} color={RootColors.Button2} style={styles.mic} />
                    </View>
                </View>

                <View style={styles.textAndInputContainer}>
                    <Text style={styles.textHeading}>
                        Description
                    </Text>
                    <View style={styles.textContainer}>
                        <View style={styles.micText}>
                            <TextInput
                                multiline
                                placeholder='Enter Description'
                                placeholderTextColor="#A7AFC8"
                                value={descriptionText}
                                style={styles.inputs}
                                // onChangeText={(value) => { setDescriptionText(value) }}
                                onChangeText={handleChangeText}
                                onContentSizeChange={event => setInputHeight(event.nativeEvent.contentSize.height)}

                            />

                        </View>
                        <Feather name='mic' size={20} color={RootColors.Button2} style={styles.mic} />
                    </View>
                </View>

                <TouchableOpacity style={styles.buttons}>
                    {/* <Text style={styles.createButton} onPress={() => { createNotepads('saved') }}>
                        Save
                    </Text> */}
                    <LinearGradient colors={['#2368FF', '#144AC1']} style={{ borderRadius: 5, marginTop: 40, marginRight: 15 }} >
                        <Text style={styles.TextStyle} onPress={() => createNotepads('saved')}>
                            Save
                        </Text>
                    </LinearGradient>
                </TouchableOpacity>

                <View>
                    <View>
                        <Toast />
                    </View>
                </View>

                {/* 
                    <TouchableOpacity style={styles.buttons}>
                        <Text style={styles.createButton} onPress={() => { showToast(), draftNotedPad('drafted') }} >Draft</Text>
                    </TouchableOpacity> 
                */}
            </View>
            <View style={[styles.toaster]}>
                {/* <Toast ref={(ref) => Toast.setRef(ref)} position={'bottom'} /> */}
                <ToastMessage
                    type='success'
                    text='Saved Successfully'
                    timeout={4000}
                    ref={toastRef}
                />
                <ToastMessage
                    type='success'
                    text='Saved to Drafts'
                    timeout={4000}
                    ref={draftRef}
                />
            </View>

        </View>
    );

};

export default CreateNotepad;

const styles = StyleSheet.create({
    container: {
        width: '100%',
        height: '100%',
        flex: 1,
        backgroundColor: RootColors.BgColor,
        marginTop: 30
    },
    toaster: {
        width: '100%',
        paddingHorizontal: 15,
        position: 'absolute',
        bottom: 20

    },
    top: {
        height: hp(8),
        width: wp(100),
        backgroundColor: RootColors.Header,
        justifyContent: 'center',

    },
    placeholderMain: {
        fontFamily: FontFamily.PoppinsMedium,
    },
    profileTop: {
        paddingHorizontal: scale(10),
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center'
    },
    profileText: {
        fontFamily: FontFamily.PoppinsMedium,
        color: RootColors.White,
        marginLeft: scale(5),
        fontSize: 14
    },
    TextStyle: {
        color: RootColors.White,
        height: 30,
        width: 70,
        textAlign: "center",
        marginTop: 5,
        fontSize: 14

    },
    mainCreate: {
        width: wp(92),
        alignSelf: 'center'
    },
    titleStyle: {
        color: TextColors.Text
    },
    buttons: {
        width: wp(95),
        flexDirection: 'row',
        justifyContent: 'flex-end'
    },
    createButton: {
        width: 'auto',
        height: 'auto',
        backgroundColor: RootColors.Button,
        paddingHorizontal: moderateScale(20),
        paddingVertical: moderateVerticalScale(8),
        borderRadius: 4,
        marginVertical: moderateVerticalScale(25),
        color: RootColors.White,
    },
    textHeading: {
        fontSize: 16,
        fontFamily: FontFamily.PoppinsMedium,
        color: "#061942",
    },
    input: {
        width: wp(95),
        height: hp(6),
        padding: 10,
        marginBottom: 0,
        borderRadius: 6,
        borderWidth: 0,
        backgroundColor: RootColors.White
    },
    inputs: {
        width: wp(85),
        padding: 10,
        marginBottom: 0,
        borderRadius: 6,
        borderWidth: 0,
        backgroundColor: RootColors.White
    },
    textContainer: {
        display: "flex",
        flexDirection: "row",
        padding: 5,
        backgroundColor: RootColors.White,
        borderRadius: 4
    },
    textAndInputContainer: {
        marginVertical: moderateScale(8)
    },
    micText: {
        flexDirection: 'row',
        alignItems: "center",
        justifyContent: "center",

    },
    mic: {
        top: 10,
        right: 10,
    }
})
